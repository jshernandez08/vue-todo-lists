{"remainingRequest":"/home/sebas/vue-todo-lists/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/sebas/vue-todo-lists/src/components/TodoList.vue?vue&type=style&index=0&id=3de47834&scoped=true&lang=css&","dependencies":[{"path":"/home/sebas/vue-todo-lists/src/components/TodoList.vue","mtime":1622234426787},{"path":"/home/sebas/vue-todo-lists/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/sebas/vue-todo-lists/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/sebas/vue-todo-lists/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/sebas/vue-todo-lists/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/sebas/vue-todo-lists/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5jb21wbGV0ZWQgewogICAgdGV4dC1kZWNvcmF0aW9uOiBsaW5lLXRocm91Z2g7CiAgICBjb2xvcjogZ3JleTsKfQo="},{"version":3,"sources":["TodoList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmNA;AACA;AACA;AACA","file":"TodoList.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"box\">\n    <div class=\"columns\">\n        <div class=\"column\">{{  today }}</div>\n        <div class=\"column\">{{ dayWeek  }}</div>\n    </div>\n    <b-field>\n        <input\n            type=\"text\"\n            class=\"input is-success\"\n            placeholder=\"Add new task\"\n            @keyup.enter=\"addTask\" \n        />\n    </b-field><br/>\n    <div v-for=\"task in todoListsFiltered\" :key=\"task._id\">\n        <ListItem :task=\"task\">\n        </ListItem>\n    </div>\n    <hr/>\n    <div v-show=\"filterBy === 'all'\">\n        <div class=\"columns\">\n            <div class=\"column\">\n                <p style=\"font-size: 18px;\">\n                    <b-checkbox\n                        type=\"is-success\"\n                        v-model=\"checkedAllTasksCompleted\"\n                        @input=\"markAllTasksCompleted\"\n                    >\n                        Mark all completed / <i>{{ totalTasksToDo }} tasks to do</i>\n                    </b-checkbox>\n                </p>\n            </div>\n            <div class=\"column\">\n                <b-button\n                    type=\"is-info is-light\"\n                    v-if=\"hasTasksCompleted\"\n                    @click=\"clearAllTasksCompleted\"\n                    style=\"margin-top: -10px;\"\n                >\n                    Clear all completed\n                </b-button>\n            </div>\n        </div>\n        <hr/>\n    </div>\n    <p style=\"font-size: 18px;\">\n        Filter by\n    </p>\n    <div class=\"buttons has-addons\">\n        <button\n            class=\"button\"\n            :class=\"{'is-success is-light': filterBy === 'all'}\"\n            @click=\"onFilterBy('all')\"\n        >\n            All\n        </button>\n        <button\n            class=\"button\"\n            :class=\"{'is-success is-light': filterBy === 'completed'}\"\n            @click=\"onFilterBy('completed')\"\n        >\n            Completed\n        </button>\n        <button\n            class=\"button\"\n            :class=\"{'is-success is-light': filterBy === 'not_completed'}\"\n            @click=\"onFilterBy('not_completed')\"\n        >\n            Not completed\n        </button>\n    </div>\n  </div>\n</template>\n\n<script>\n    import ListItem from './ListItem';\n    import moment from 'moment';\n\n    export default {\n        name: 'TodoList',\n        components: {\n            ListItem\n        },\n        data: function(){\n            return {\n                today: moment().format('MMMM Do YYYY'),\n                dayWeek: moment().format('dddd'),\n                checkedAllTasksCompleted: false,\n                filterBy: \"all\",\n                todoLists: [{\n                    _id: 1,\n                    title: \"My firts task\",\n                    completed: false,\n                    editing: false\n                }]\n            }\n        },\n        watch: {\n            todoLists: {\n                deep: true,\n                handler: function(newValue){\n                    if (!newValue.length){\n                        this.checkedAllTasksCompleted = false;\n                        return;\n                    }\n                    this.checkedAllTasksCompleted = this.totalTasksToDo === 0;\n                }\n            }\n        },\n        methods: {\n            addTask: function(e){\n                var task = e.target.value;\n                if (task.trim().length === 0){\n                    return;\n                }\n                this.todoLists.push({\n                    _id: this.lastId,\n                    title: task,\n                    completed: false,\n                    editing: false\n                });\n                e.target.value = \"\";\n            },\n            editTask: function(task){\n                task.editing = true;\n                this.$nextTick(() => {\n                    this.$refs[\"inputEditTask-\" + task._id][0].focus();\n                });\n            },\n            onEditTask: function(taskId, e){\n                var task = e.target.value;\n                if (task.trim().length === 0){\n                    return;\n                }\n                this.todoLists = this.todoLists.map(function(todo){\n                    if (todo._id === taskId){\n                        todo.title = task;\n                        todo.editing = false;\n                        return todo;\n                    }\n                    return todo;\n                });\n            },\n            cancelEdit: function(task){\n                task.editing = false;\n            },\n            removeTask: function(taskId){\n                this.todoLists = this.todoLists.filter((task) => {\n                    return task._id !== taskId;\n                });\n            },\n            markAllTasksCompleted: function(checked){\n                this.todoLists.forEach((task) => {\n                    task.completed = checked;\n                });\n            },\n            clearAllTasksCompleted: function(){\n                this.todoLists = this.todoLists.filter((task) => {\n                    return !task.completed;\n                });\n            },\n            onFilterBy: function(filter){\n                this.filterBy = filter;\n            }\n        },\n        computed: {\n            lastId: function(){\n                if (!this.todoLists.length){\n                    return 1;\n                }\n                return this.todoLists[this.todoLists.length - 1]._id + 1;\n            },\n            totalTasksToDo: function(){\n                if (!this.todoLists.length){\n                    return 0;\n                }\n                return this.todoLists.filter((task) => {\n                    return !task.completed;\n                }).length;\n            },\n            totalTasksCompleted: function(){\n                if (!this.todoLists.length){\n                    return 0;\n                }\n                return this.todoLists.filter((task) => {\n                    return task.completed;\n                }).length;\n            },\n            hasTasksCompleted: function(){\n                return this.totalTasksCompleted > 0;\n            },\n            todoListsFiltered: function(){\n                if (this.filterBy === \"all\"){\n                    return this.todoLists;\n                }\n                if (this.filterBy === \"completed\"){\n                    return this.todoLists.filter((task) => {\n                        return task.completed;\n                    });\n                }\n                if (this.filterBy === \"not_completed\"){\n                    return this.todoLists.filter((task) => {\n                        return !task.completed;\n                    });\n                }\n            }\n        }\n    }\n</script>\n\n<style scoped>\n    .completed {\n        text-decoration: line-through;\n        color: grey;\n    }\n</style>\n"]}]}